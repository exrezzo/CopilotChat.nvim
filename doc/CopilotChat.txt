*CopilotChat.txt*         For NVIM v0.8.0        Last change: 2025 February 20

==============================================================================
Table of Contents                              *CopilotChat-table-of-contents*

1. Requirements                                     |CopilotChat-requirements|
2. Installation                                     |CopilotChat-installation|
  - lazy.nvim                                          |CopilotChat-lazy.nvim|
  - vim-plug                                            |CopilotChat-vim-plug|
  - Manual                                                |CopilotChat-manual|
3. Features                                             |CopilotChat-features|
  - Commands                                            |CopilotChat-commands|
  - Key Mappings                                    |CopilotChat-key-mappings|
  - Prompts                                              |CopilotChat-prompts|
  - Models and Agents                          |CopilotChat-models-and-agents|
  - Contexts                                            |CopilotChat-contexts|
  - Selections                                        |CopilotChat-selections|
  - Providers                                          |CopilotChat-providers|
4. Configuration                                   |CopilotChat-configuration|
  - Default Configuration                  |CopilotChat-default-configuration|
  - Customizing Buffers                      |CopilotChat-customizing-buffers|
5. API Reference                                   |CopilotChat-api-reference|
6. Tips and Examples                           |CopilotChat-tips-and-examples|
  - Quick Chat with Buffer                |CopilotChat-quick-chat-with-buffer|
  - Inline Chat Window                        |CopilotChat-inline-chat-window|
  - Telescope Integration                  |CopilotChat-telescope-integration|
  - Quick Search with Perplexity    |CopilotChat-quick-search-with-perplexity|
  - Markdown Rendering                        |CopilotChat-markdown-rendering|
7. Development                                       |CopilotChat-development|
  - Setup                                                  |CopilotChat-setup|
  - Contributing                                    |CopilotChat-contributing|
8. Contributors                                     |CopilotChat-contributors|
9. Stargazers                                         |CopilotChat-stargazers|
10. Links                                                  |CopilotChat-links|


==============================================================================
1. Requirements                                     *CopilotChat-requirements*

- Neovim 0.10.0+ <https://neovim.io/> - Older versions are not officially supported
- curl <https://curl.se/> - 8.0.0+ is recommended for best compatibility. Should be installed by default on most systems and also shipped with Neovim
- Copilot chat in the IDE <https://github.com/settings/copilot> setting enabled in GitHub settings
- _Optional_ tiktoken_core <https://github.com/gptlang/lua-tiktoken> - Used for more accurate token counting
    - For Arch Linux users, you can install `luajit-tiktoken-bin` <https://aur.archlinux.org/packages/luajit-tiktoken-bin> or `lua51-tiktoken-bin` <https://aur.archlinux.org/packages/lua51-tiktoken-bin> from aur
    - Alternatively, install via luarocks: `sudo luarocks install --lua-version 5.1 tiktoken_core`
    - Alternatively, download a pre-built binary from lua-tiktoken releases <https://github.com/gptlang/lua-tiktoken/releases>. You can check your Lua PATH in Neovim by doing `:lua print(package.cpath)`. Save the binary as `tiktoken_core.so` in any of the given paths.
- _Optional_ git <https://git-scm.com/> - Used for fetching git diffs for `git` context
    - For Arch Linux users, you can install `git` <https://archlinux.org/packages/extra/x86_64/git> from the official repositories
    - For other systems, use your package manager to install `git`. For windows use the installer provided from git site
- _Optional_ lynx <https://lynx.invisible-island.net/> - Used for improved fetching of URLs for `url` context
    - For Arch Linux users, you can install `lynx` <https://archlinux.org/packages/extra/x86_64/lynx> from the official repositories
    - For other systems, use your package manager to install `lynx`. For windows use the installer provided from lynx site


  [!WARNING] If you are on neovim < 0.11.0, you also might want to add `noinsert`
  and `popup` to your `completeopt` to make the chat completion behave well.

==============================================================================
2. Installation                                     *CopilotChat-installation*


LAZY.NVIM                                              *CopilotChat-lazy.nvim*

>lua
    return {
      {
        "CopilotC-Nvim/CopilotChat.nvim",
        dependencies = {
          { "github/copilot.vim" }, -- or zbirenbaum/copilot.lua
          { "nvim-lua/plenary.nvim", branch = "master" }, -- for curl, log and async functions
        },
        build = "make tiktoken", -- Only on MacOS or Linux
        opts = {
          -- See Configuration section for options
        },
        -- See Commands section for default commands if you want to lazy load on them
      },
    }
<

See @jellydn <https://github.com/jellydn> for configuration
<https://github.com/jellydn/lazy-nvim-ide/blob/main/lua/plugins/extras/copilot-chat-v2.lua>


VIM-PLUG                                                *CopilotChat-vim-plug*

Similar to the lazy setup, you can use the following configuration:

>vim
    call plug#begin()
    Plug 'github/copilot.vim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'CopilotC-Nvim/CopilotChat.nvim'
    call plug#end()
    
    lua << EOF
    require("CopilotChat").setup {
      -- See Configuration section for options
    }
    EOF
<


MANUAL                                                    *CopilotChat-manual*

1. Put the files in the right place

>
    mkdir -p ~/.config/nvim/pack/copilotchat/start
    cd ~/.config/nvim/pack/copilotchat/start
    
    git clone https://github.com/github/copilot.vim
    git clone https://github.com/nvim-lua/plenary.nvim
    
    git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
<

1. Add to your configuration (e.g.Â `~/.config/nvim/init.lua`)

>lua
    require("CopilotChat").setup {
      -- See Configuration section for options
    }
<

See @deathbeam <https://github.com/deathbeam> for configuration
<https://github.com/deathbeam/dotfiles/blob/master/nvim/.config/nvim/lua/config/copilot.lua>


==============================================================================
3. Features                                             *CopilotChat-features*


COMMANDS                                                *CopilotChat-commands*

Commands are used to control the chat interface:

  Command                    Description
  -------------------------- -------------------------------
  :CopilotChat <input>?      Open chat with optional input
  :CopilotChatOpen           Open chat window
  :CopilotChatClose          Close chat window
  :CopilotChatToggle         Toggle chat window
  :CopilotChatStop           Stop current output
  :CopilotChatReset          Reset chat window
  :CopilotChatSave <name>?   Save chat history
  :CopilotChatLoad <name>?   Load chat history
  :CopilotChatModels         View/select available models
  :CopilotChatAgents         View/select available agents
  :CopilotChat<PromptName>   Use specific prompt template

KEY MAPPINGS                                        *CopilotChat-key-mappings*

Default mappings in the chat interface:

  -------------------------------------------------------------------------
  Insert   Normal   Action
  -------- -------- -------------------------------------------------------
  <Tab>    <Tab>    Trigger/accept completion menu for tokens

  <C-c>    q        Close the chat window

  <C-l>    <C-l>    Reset and clear the chat window

  <C-s>    <CR>     Submit the current prompt

  -        gr       Toggle sticky prompt for line under cursor

  <C-y>    <C-y>    Accept nearest diff (best with COPILOT_GENERATE)

  -        gj       Jump to section of nearest diff

  -        gqa      Add all answers from chat to quickfix list

  -        gqd      Add all diffs from chat to quickfix list

  -        gy       Yank nearest diff to register

  -        gd       Show diff between source and nearest diff

  -        gi       Show info about current chat

  -        gc       Show current chat context

  -        gh       Show help message
  -------------------------------------------------------------------------
The mappings can be customized by setting the `mappings` table in your
configuration. Each mapping can have:

- `normal`: Key for normal mode
- `insert`: Key for insert mode
- `detail`: Description of what the mapping does

For example, to change the submit prompt mapping or show_diff full diff option:

>lua
    {
        mappings = {
          submit_prompt = {
            normal = '<Leader>s',
            insert = '<C-s>'
          }
          show_diff = {
            full_diff = true
          }
        }
    }
<


PROMPTS                                                  *CopilotChat-prompts*


PREDEFINED PROMPTS ~

Predefined prompt templates for common tasks. Reference them with `/PromptName`
in chat or use `:CopilotChat<PromptName>`:

  Prompt     Description
  ---------- --------------------------------------------------
  Explain    Write an explanation for the selected code
  Review     Review the selected code
  Fix        Rewrite the code with bug fixes
  Optimize   Optimize code for performance and readability
  Docs       Add documentation comments to the code
  Tests      Generate tests for the code
  Commit     Write commit message using commitizen convention
Define your own prompts in the configuration:

>lua
    {
      prompts = {
        MyCustomPrompt = {
          prompt = 'Explain how it works.',
          system_prompt = 'You are very good at explaining stuff',
          mapping = '<leader>ccmc',
          description = 'My custom prompt description',
        }
      }
    }
<


SYSTEM PROMPTS ~

System prompts define the AI modelâs behavior. Reference them with
`/PROMPT_NAME` in chat:

  Prompt                 Description
  ---------------------- --------------------------------------------
  COPILOT_INSTRUCTIONS   Base GitHub Copilot instructions
  COPILOT_EXPLAIN        Adds coding tutor behavior
  COPILOT_REVIEW         Adds code review behavior with diagnostics
  COPILOT_GENERATE       Adds code generation behavior and rules
Define your own system prompts in the configuration (similar to `prompts`):

>lua
    {
      prompts = {
        Yarrr = {
          system_prompt = 'You are fascinated by pirates, so please respond in pirate speak.',
        }
      }
    }
<


STICKY PROMPTS ~

Sticky prompts persist across chat sessions. Theyâre useful for maintaining
context or agent selection. They work as follows:

1. Prefix text with `>` using markdown blockquote syntax
2. The prompt will be copied at the start of every new chat prompt
3. Edit sticky prompts freely while maintaining the `>` prefix

Examples:

>markdown
    > #files
    > List all files in the workspace
    
    > @models Using Mistral-small
    > What is 1 + 11
<

You can also set default sticky prompts in the configuration:

>lua
    {
      sticky = {
        '@models Using Mistral-small',
        '#files:full',
      }
    }
<


MODELS AND AGENTS                              *CopilotChat-models-and-agents*


MODELS ~

You can control which AI model to use in three ways:

1. List available models with `:CopilotChatModels`
2. Set model in prompt with `$model_name`
3. Configure default model via `model` config key

For supported models, see:

- Copilot Chat Models <https://docs.github.com/en/copilot/using-github-copilot/ai-models/changing-the-ai-model-for-copilot-chat#ai-models-for-copilot-chat>
- GitHub Marketplace Models <https://github.com/marketplace/models> (experimental, limited usage)


AGENTS ~

Agents determine the AI assistantâs capabilities. Control agents in three
ways:

1. List available agents with `:CopilotChatAgents`
2. Set agent in prompt with `@agent_name`
3. Configure default agent via `agent` config key

The default "noop" agent is `none`. For more information:

- Extension Agents Documentation <https://docs.github.com/en/copilot/using-github-copilot/using-extensions-to-integrate-external-tools-with-copilot-chat>
- Available Agents <https://github.com/marketplace?type=apps&copilot_app=true>


CONTEXTS                                                *CopilotChat-contexts*

Contexts provide additional information to the chat. Add context using
`#context_name[:input]` syntax:

  Context    Input Support   Description
  ---------- --------------- -------------------------------------
  buffer     â (number)      Current or specified buffer content
  buffers    â (type)        All buffers content (listed/all)
  file       â (path)        Content of specified file
  files      â (mode)        Workspace files (list/full content)
  git        â (ref)         Git diff (unstaged/staged/commit)
  url        â (url)         Content from URL
  register   â (name)        Content of vim register
  quickfix   -               Quickfix list file contents
Examples:

>markdown
    > #buffer
    > #buffer:2
    > #files:list
    > #git:staged
    > #url:https://example.com
<

Define your own contexts in the configuration with input handling and
resolution:

>lua
    {
      contexts = {
        birthday = {
          input = function(callback)
            vim.ui.select({ 'user', 'napoleon' }, {
              prompt = 'Select birthday> ',
            }, callback)
          end,
          resolve = function(input)
            return {
              {
                content = input .. ' birthday info',
                filename = input .. '_birthday',
                filetype = 'text',
              }
            }
          end
        }
      }
    }
<


SELECTIONS                                            *CopilotChat-selections*

Selections determine the source content for chat interactions. Configure them
globally or per-prompt.

Available selections are located in `local select =
require("CopilotChat.select")`:

  Selection   Description
  ----------- --------------------------------------------------------
  visual      Current visual selection
  buffer      Current buffer content
  line        Current line content
  unnamed     Unnamed register (last deleted/changed/yanked content)
You can set a default selection in the configuration:

>lua
    {
      -- Default uses visual selection or falls back to buffer
      selection = function(source)
        return select.visual(source) or select.buffer(source)
      end
    }
<


PROVIDERS                                              *CopilotChat-providers*

Providers are modules that implement integration with different AI providers.


BUILT-IN PROVIDERS ~

- `copilot` - Default GitHub Copilot provider used for chat and embeddings
- `github_models` - Provider for GitHub Marketplace models


PROVIDER INTERFACE ~

Custom providers can implement these methods:

>lua
    {
      -- Optional: Disable provider
      disabled?: boolean,
    
      -- Optional: Provider to use for embeddings
      embeddings?: string,
    
      -- Optional: Get authentication token
      get_token(): string, number?,
    
      -- Required: Get request headers
      get_headers(token: string): table,
    
      -- Required: Get API endpoint URL
      get_url(opts: table): string,
    
      -- Required: Prepare request body
      prepare_input(inputs: table, opts: table, model: table): table,
    
      -- Optional: Get available models
      get_models?(headers: table): table,
    
      -- Optional: Get available agents
      get_agents?(headers: table): table,
    }
<


OLLAMA EXAMPLE ~

Hereâs how to implement an ollama <https://ollama.com/> provider:

>lua
    {
      providers = {
        ollama = {
          embed = 'copilot_embeddings', -- Use Copilot as embedding provider
    
          -- Copy copilot input and output processing
          prepare_input = require('CopilotChat.config.providers').copilot.prepare_input,
          prepare_output = require('CopilotChat.config.providers').copilot.prepare_output,
    
          get_headers = function()
            return {
              ['Content-Type'] = 'application/json',
            }
          end,
    
          get_models = function(headers)
            local utils = require('CopilotChat.utils')
            local response = utils.curl_get('http://localhost:11434/api/tags', { headers = headers })
            if not response or response.status ~= 200 then
              error('Failed to fetch models: ' .. tostring(response and response.status))
            end
    
            local models = {}
            for _, model in ipairs(vim.json.decode(response.body)['models']) do
              table.insert(models, {
                id = model.name,
                name = model.name
              })
            end
            return models
          end,
    
          get_url = function()
            return 'http://localhost:11434/api/chat'
          end,
        }
      }
    }
<


==============================================================================
4. Configuration                                   *CopilotChat-configuration*


DEFAULT CONFIGURATION                      *CopilotChat-default-configuration*

Below are all available configuration options with their default values:

>lua
    {
    
      -- Shared config starts here (can be passed to functions at runtime and configured via setup function)
    
      system_prompt = prompts.COPILOT_INSTRUCTIONS.system_prompt, -- System prompt to use (can be specified manually in prompt via /).
    
      model = 'gpt-4o', -- Default model to use, see ':CopilotChatModels' for available models (can be specified manually in prompt via $).
      agent = 'copilot', -- Default agent to use, see ':CopilotChatAgents' for available agents (can be specified manually in prompt via @).
      context = nil, -- Default context or array of contexts to use (can be specified manually in prompt via #).
      sticky = nil, -- Default sticky prompt or array of sticky prompts to use at start of every new chat.
    
      temperature = 0.1, -- GPT result temperature
      headless = false, -- Do not write to chat buffer and use history(useful for using callback for custom processing)
      callback = nil, -- Callback to use when ask response is received
    
      -- default selection
      selection = function(source)
        return select.visual(source) or select.buffer(source)
      end,
    
      -- default window options
      window = {
        layout = 'vertical', -- 'vertical', 'horizontal', 'float', 'replace'
        width = 0.5, -- fractional width of parent, or absolute width in columns when > 1
        height = 0.5, -- fractional height of parent, or absolute height in rows when > 1
        -- Options below only apply to floating windows
        relative = 'editor', -- 'editor', 'win', 'cursor', 'mouse'
        border = 'single', -- 'none', single', 'double', 'rounded', 'solid', 'shadow'
        row = nil, -- row position of the window, default is centered
        col = nil, -- column position of the window, default is centered
        title = 'Copilot Chat', -- title of chat window
        footer = nil, -- footer of chat window
        zindex = 1, -- determines if window is on top or below other floating windows
      },
    
      show_help = true, -- Shows help message as virtual lines when waiting for user input
      show_folds = true, -- Shows folds for sections in chat
      highlight_selection = true, -- Highlight selection
      highlight_headers = true, -- Highlight headers in chat, disable if using markdown renderers (like render-markdown.nvim)
      auto_follow_cursor = true, -- Auto-follow cursor in chat
      auto_insert_mode = false, -- Automatically enter insert mode when opening window and on new prompt
      insert_at_end = false, -- Move cursor to end of buffer when inserting text
      clear_chat_on_new_prompt = false, -- Clears chat on every new prompt
    
      -- Static config starts here (can be configured only via setup function)
    
      debug = false, -- Enable debug logging (same as 'log_level = 'debug')
      log_level = 'info', -- Log level to use, 'trace', 'debug', 'info', 'warn', 'error', 'fatal'
      proxy = nil, -- [protocol://]host[:port] Use this proxy
      allow_insecure = false, -- Allow insecure server connections
    
      chat_autocomplete = true, -- Enable chat autocompletion (when disabled, requires manual `mappings.complete` trigger)
    
      log_path = vim.fn.stdpath('state') .. '/CopilotChat.log', -- Default path to log file
      history_path = vim.fn.stdpath('data') .. '/copilotchat_history', -- Default path to stored history
    
      question_header = '# User ', -- Header to use for user questions
      answer_header = '# Copilot ', -- Header to use for AI answers
      error_header = '# Error ', -- Header to use for errors
      separator = 'âââ', -- Separator to use in chat
    
      -- default providers
      -- see config/providers.lua for implementation
      providers = {
        copilot = {
        },
        github_models = {
        },
        copilot_embeddings = {
        },
      }
    
      -- default contexts
      -- see config/contexts.lua for implementation
      contexts = {
        buffer = {
        },
        buffers = {
        },
        file = {
        },
        files = {
        },
        git = {
        },
        url = {
        },
        register = {
        },
        quickfix = {
        },
      },
    
      -- default prompts
      -- see config/prompts.lua for implementation
      prompts = {
        Explain = {
          prompt = '> /COPILOT_EXPLAIN\n\nWrite an explanation for the selected code as paragraphs of text.',
        },
        Review = {
          prompt = '> /COPILOT_REVIEW\n\nReview the selected code.',
        },
        Fix = {
          prompt = '> /COPILOT_GENERATE\n\nThere is a problem in this code. Rewrite the code to show it with the bug fixed.',
        },
        Optimize = {
          prompt = '> /COPILOT_GENERATE\n\nOptimize the selected code to improve performance and readability.',
        },
        Docs = {
          prompt = '> /COPILOT_GENERATE\n\nPlease add documentation comments to the selected code.',
        },
        Tests = {
          prompt = '> /COPILOT_GENERATE\n\nPlease generate tests for my code.',
        },
        Commit = {
          prompt = '> #git:staged\n\nWrite commit message for the change with commitizen convention. Make sure the title has maximum 50 characters and message is wrapped at 72 characters. Wrap the whole message in code block with language gitcommit.',
        },
      },
    
      -- default mappings
      -- see config/mappings.lua for implementation
      mappings = {
        complete = {
          insert = '<Tab>',
        },
        close = {
          normal = 'q',
          insert = '<C-c>',
        },
        reset = {
          normal = '<C-l>',
          insert = '<C-l>',
        },
        submit_prompt = {
          normal = '<CR>',
          insert = '<C-s>',
        },
        toggle_sticky = {
          detail = 'Makes line under cursor sticky or deletes sticky line.',
          normal = 'gr',
        },
        accept_diff = {
          normal = '<C-y>',
          insert = '<C-y>',
        },
        jump_to_diff = {
          normal = 'gj',
        },
        quickfix_answers = {
          normal = 'gqa',
        },
        quickfix_diffs = {
          normal = 'gqd',
        },
        yank_diff = {
          normal = 'gy',
          register = '"', -- Default register to use for yanking
        },
        show_diff = {
          normal = 'gd',
          full_diff = false, -- Show full diff instead of unified diff when showing diff window
        },
        show_info = {
          normal = 'gi',
        },
        show_context = {
          normal = 'gc',
        },
        show_help = {
          normal = 'gh',
        },
      },
    }
<


CUSTOMIZING BUFFERS                          *CopilotChat-customizing-buffers*

You can set local options for plugin buffers (`copilot-chat`, `copilot-diff`,
`copilot-overlay`):

>lua
    vim.api.nvim_create_autocmd('BufEnter', {
        pattern = 'copilot-*',
        callback = function()
            -- Set buffer-local options
            vim.opt_local.relativenumber = true
    
            -- Add buffer-local mappings
            vim.keymap.set('n', '<C-p>', function()
              print(require("CopilotChat").response())
            end, { buffer = true })
        end
    })
<


==============================================================================
5. API Reference                                   *CopilotChat-api-reference*

>lua
    local chat = require("CopilotChat")
    
    -- Window Management
    chat.open()     -- Open chat window
    chat.open({     -- Open with custom options
      window = {
        layout = 'float',
        title = 'Custom Chat',
      },
    })
    chat.close()    -- Close chat window
    chat.toggle()   -- Toggle chat window
    chat.reset()    -- Reset chat window
    
    -- Chat Interaction
    chat.ask("Explain this code.")  -- Basic question
    chat.ask("Explain this code.", {
      selection = require("CopilotChat.select").buffer,
      context = { 'buffers', 'files' },
      callback = function(response)
        print("Response:", response)
      end,
    })
    
    -- Utilities
    chat.prompts()   -- Get all available prompts
    chat.response()  -- Get last response
    chat.log_level("debug")  -- Set log level
    
    
    -- Actions
    local actions = require("CopilotChat.actions")
    actions.pick(actions.prompt_actions({
        selection = require("CopilotChat.select").visual,
    }))
    
    -- Update config
    chat.setup({
        model = 'gpt-4',
        window = {
            layout = 'float'
        }
    })
<


==============================================================================
6. Tips and Examples                           *CopilotChat-tips-and-examples*


QUICK CHAT WITH BUFFER                    *CopilotChat-quick-chat-with-buffer*

Set up a quick chat command that uses the entire buffer content:

>lua
    -- Quick chat keybinding
    vim.keymap.set('n', '<leader>ccq', function()
      local input = vim.fn.input("Quick Chat: ")
      if input ~= "" then
        require("CopilotChat").ask(input, {
          selection = require("CopilotChat.select").buffer
        })
      end
    end, { desc = "CopilotChat - Quick chat" })
<


INLINE CHAT WINDOW                            *CopilotChat-inline-chat-window*

Configure the chat window to appear inline near the cursor:

>lua
    require("CopilotChat").setup({
      window = {
        layout = 'float',
        relative = 'cursor',
        width = 1,
        height = 0.4,
        row = 1
      }
    })
<


TELESCOPE INTEGRATION                      *CopilotChat-telescope-integration*

Requires telescope.nvim <https://github.com/nvim-telescope/telescope.nvim>:

>lua
    vim.keymap.set('n', '<leader>ccp', function()
      local actions = require("CopilotChat.actions")
      require("CopilotChat.integrations.telescope").pick(actions.prompt_actions())
    end, { desc = "CopilotChat - Prompt actions" })
<


QUICK SEARCH WITH PERPLEXITY        *CopilotChat-quick-search-with-perplexity*

Requires PerplexityAI Agent <https://github.com/marketplace/perplexityai>:

>lua
    vim.keymap.set({ 'n', 'v' }, '<leader>ccs', function()
      local input = vim.fn.input("Perplexity: ")
      if input ~= "" then
        require("CopilotChat").ask(input, {
          agent = "perplexityai",
          selection = false,
        })
      end
    end, { desc = "CopilotChat - Perplexity Search" })
<


MARKDOWN RENDERING                            *CopilotChat-markdown-rendering*

Use render-markdown.nvim
<https://github.com/MeanderingProgrammer/render-markdown.nvim> for better chat
display:

>lua
    -- Register copilot-chat filetype
    require('render-markdown').setup({
      file_types = { 'markdown', 'copilot-chat' },
    })
    
    -- Adjust chat display settings
    require('CopilotChat').setup({
      highlight_headers = false,
      separator = '---',
      error_header = '> [!ERROR] Error',
    })
<


==============================================================================
7. Development                                       *CopilotChat-development*


SETUP                                                      *CopilotChat-setup*

To set up the environment:

1. Clone the repository:

>bash
    git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
    cd CopilotChat.nvim
<

1. Install development dependencies:

>bash
    # Install pre-commit hooks
    make install-pre-commit
<

To run tests:

>bash
    make test
<


CONTRIBUTING                                        *CopilotChat-contributing*

1. Fork the repository
2. Create your feature branch
3. Make your changes
4. Run tests and lint checks
5. Submit a pull request

See CONTRIBUTING.md </CONTRIBUTING.md> for detailed guidelines.


==============================================================================
8. Contributors                                     *CopilotChat-contributors*

Thanks goes to these wonderful people (emoji key
<https://allcontributors.org/docs/en/emoji-key>):

gptlangð» ðDung Duc Huynh (Kaka)ð» ðAhmed Haracicð»TrÃ­ Thiá»n Nguyá»nð»He Zhizhouð»Guruprakash Rajakkannuð»kristofkað»PostCyberPunkðKatsuhiko Nishimrað»Erno Hopearuohoð»Shaun Garwoodð»neutrinoA4ð» ðJack Muratoreð»Adriel Velazquezð» ðTomas Slusnyð» ðNisalðTobias GÃ¥rdhusðPetr DlouhÃ½ðDylan Madisettið»Aaron Weisbergð» ðJose Tlacuiloð» ðKevin Traverð» ðdTryð»Arata Furukawað»Lingð»Ivan Frolovð»Folke Lemaitreð» ðGitMurfð»Dmitrii Lipinð»jinzhongjiaðguillð»Sjon-Paul Brownð»Renzo MondragÃ³nð» ðfjchen7ð»RadosÅaw WoÅºniakð»JakubPecenkað»thomastthaiðTomÃ¡Å¡ JanouÅ¡ekð»Toddneal StallworthðSergey Alexandrovð»LÃ©opold Mebazaað»JunKi Jinð»abdennourzahafðJosiahð»Tony Fischerð» ðKohei Wadað»Sebastian Yaghoubiðjohncmingð»Rokas BrazdÅ¾ionisð»Solað ð»This project follows the all-contributors
<https://github.com/all-contributors/all-contributors> specification.
Contributions of any kind are welcome!


==============================================================================
9. Stargazers                                         *CopilotChat-stargazers*

<https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim>

==============================================================================
10. Links                                                  *CopilotChat-links*

1. *@jellydn*: 
2. *@deathbeam*: 
3. *Stargazers over time*: https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
